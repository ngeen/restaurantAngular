/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { BaseResponse } from '../model/baseResponse';
import { MediaDTO } from '../model/mediaDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MediaControllerService {

    protected basePath = 'https://restapi.oenginoz.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * deleteMedia
     * 
     * @param mediaDTO mediaDTO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteMediaUsingPOST(mediaDTO: MediaDTO, observe?: 'body', reportProgress?: boolean): Observable<BaseResponse>;
    public deleteMediaUsingPOST(mediaDTO: MediaDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BaseResponse>>;
    public deleteMediaUsingPOST(mediaDTO: MediaDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BaseResponse>>;
    public deleteMediaUsingPOST(mediaDTO: MediaDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (mediaDTO === null || mediaDTO === undefined) {
            throw new Error('Required parameter mediaDTO was null or undefined when calling deleteMediaUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<BaseResponse>(`${this.basePath}/deleteMedia`,
            mediaDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveMedia
     * 
     * @param file file
     * @param itemId itemId
     * @param userId userId
     * @param venueId venueId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveMediaUsingPOST(file: Blob, itemId: string, userId: string, venueId: string, observe?: 'body', reportProgress?: boolean): Observable<BaseResponse>;
    public saveMediaUsingPOST(file: Blob, itemId: string, userId: string, venueId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BaseResponse>>;
    public saveMediaUsingPOST(file: Blob, itemId: string, userId: string, venueId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BaseResponse>>;
    public saveMediaUsingPOST(file: Blob, itemId: string, userId: string, venueId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling saveMediaUsingPOST.');
        }
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling saveMediaUsingPOST.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling saveMediaUsingPOST.');
        }
        if (venueId === null || venueId === undefined) {
            throw new Error('Required parameter venueId was null or undefined when calling saveMediaUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (itemId !== undefined) {
            queryParameters = queryParameters.set('itemId', <any>itemId);
        }
        if (userId !== undefined) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (venueId !== undefined) {
            queryParameters = queryParameters.set('venueId', <any>venueId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }

        return this.httpClient.post<BaseResponse>(`${this.basePath}/saveMedia`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
